plugins {
	id 'java-library'
	id 'org.springframework.boot' version '3.3.5'
	id 'io.spring.dependency-management' version '1.1.6'
	id 'org.cresplanex.core.sbe-tool'
	id 'maven-publish'
	id 'cl.franciscosolis.sonatype-central-upload' version '1.0.3'
}

group = 'org.cresplanex'
version = '1.0.0'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
	withSourcesJar()
//	withJavadocJar()
}

repositories {
	mavenCentral()
}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			pom {
				name.set(project.name)
				// 説明
				description.set("Core Lib For Microservice")
				// URL
				url.set("https://github.com/LabGroupware/lib-core-java")
				// ライセンス
				licenses {
					license {
						name.set("The Apache License, Version 2.0")
						url.set("http://www.apache.org/licenses/LICENSE-2.0.txt")
					}
				}
				// 開発者
				developers {
					developer {
						id.set("ablankz")
						name.set("Hayashi Kenta")
						email.set("k.hayashi@cresplanex.com")
					}
				}
				// バージョン管理システム
				scm {
					url.set("https://github.com/LabGroupware/lib-core-java")
					connection.set("scm:svn:https://github.com/LabGroupware/lib-core-java")
					developerConnection.set("scm:svn:https://github.com/LabGroupware/lib-core-java")
				}
			}
		}
	}
	repositories {
        maven {
            name = "local"
            url = uri("file://${System.getProperty("user.home")}/.m2/repository")
        }
    }
//	repositories {
//		maven {
//			name = "Sonatype"
//			url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
//			credentials {
//				username = project.findProperty("ossrhUsername") ?: ""
//				password = project.findProperty("ossrhPassword") ?: ""
//			}
//		}
//	}
}


sonatypeCentralUpload {
	// 公開するファイルを生成するタスクに依存する。
	dependsOn("jar", "sourcesJar", "generatePomFileForMavenJavaPublication")
//	dependsOn("jar", "sourcesJar", "javadocJar", "generatePomFileForMavenPublication")

	username = project.findProperty("ossrhUsername") ?: ""
	password = project.findProperty("ossrhPassword") ?: ""

	// タスク名から成果物を取得する。
	archives = files(
			tasks.named("jar"),
			tasks.named("sourcesJar"),
//			tasks.named("javadocJar"),
	)
	// POMファイルをタスクの成果物から取得する。
	pom = file(
			tasks.named("generatePomFileForMavenJavaPublication").get().outputs.files.singleFile
	)

	signingKey = file(project.findProperty("signing.secretKeyRingFile") ?: "").text
	signingKeyPassphrase = project.findProperty("signing.password") ?: ""

//	// PGPの秘密鍵を指定する。
//	signingKey = System.getenv("PGP_SIGNING_KEY")
//	// PGPの秘密鍵のパスフレーズを指定する。
//	signingKeyPassphrase = System.getenv("PGP_SIGNING_KEY_PASSPHRASE")
}

ext {
	jacksonVersion = '2.18.0'
	apacheCommonsVersion = '3.17.0'
	realLogicSbeVersion = '1.32.1'
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter'
	implementation 'org.springframework.kafka:spring-kafka'
	implementation "com.fasterxml.jackson.core:jackson-databind:$jacksonVersion"
    implementation "com.fasterxml.jackson.datatype:jackson-datatype-jdk8:$jacksonVersion"
	implementation "org.apache.commons:commons-lang3:$apacheCommonsVersion"
	implementation "uk.co.real-logic:sbe-all:$realLogicSbeVersion"
	implementation 'org.postgresql:postgresql'
	implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
	implementation 'org.springframework.retry:spring-retry'
	implementation 'org.apache.kafka:connect-api'
	implementation 'org.apache.kafka:connect-transforms'
	implementation 'org.apache.kafka:connect-json'

	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:deprecation"
    options.compilerArgs << "-Werror"
}

tasks.named('test') {
	useJUnitPlatform()
}

import org.apache.tools.ant.filters.ReplaceTokens
processResources {
	filesMatching('**/application.yaml') {
		filter(
				ReplaceTokens,
				tokens: [
						'applicationName': "${rootProject.name}".toString(),
						'version': "${version}".toString(),
				]
		)
	}
}
